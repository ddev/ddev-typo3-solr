#!/usr/bin/env bash
#ddev-generated
## Description: Create and destroy solr cores and configsets
## Usage: solrctl
## Example: ddev solrctl
CMD=$1
YAML_FILE=".ddev/typo3-solr/config.yaml"
# Use yq container, because the user may not have yq installed locally.
yqd() {
    docker run --rm -i mikefarah/yq "$@"
}
wait_for_solr() {
    ddev exec -s typo3-solr wait-for-solr.sh --wait-seconds 1 1>/dev/null
}
create_core() {
    name="${1}"
    configset="${2}"
    schema="${3}"
    if [ "$configset" = "" ]; then
        echo "❌ Please define a configset!"
        exit 1
    fi
    # Schema
    schema_param=""
    if [ ! "$schema" = "" ]; then
        schema_param="&schema=$schema"
    fi
    api_url="http://localhost:${SOLR_PORT:-8983}/solr/admin/cores?action=CREATE&name=$name&configSet=$configset&dataDir=./$schema_param"
    response=$(ddev exec -s typo3-solr "curl -s '$api_url'")
    response_code=$?
    status=$(echo "$response" | yqd '.responseHeader.status')

    if [ "$response_code" -gt 0 ]; then
        echo "❌ Failed to call solr API on $api_url"
        exit 1
    fi

    if [ "$status" = "0" ]; then
        echo "✅ Core '$name' created"
    elif [ "$status" = "500" ]; then
        error_core=$(echo "$response" | yqd '.error.msg')
        echo "ℹ️ $error_core"
    else
        error_message=$(echo "$response" | yqd '.error.msg')
        echo "❌ $error_message"
        exit 1
    fi
}

delete_core() {
    api_delete_url="http://localhost:8983/solr/admin/cores?action=UNLOAD&core=$name&deleteIndex=true"
    response=$(ddev exec -s typo3-solr "curl -s -X POST -H 'Content-type: application/json' '$api_delete_url'")
    response_code=$?
    status=$(echo "$response" | yqd '.responseHeader.status')

    if [ "$status" -eq 0 ]; then
        docker exec -u 0 -i ddev-"$DDEV_SITENAME"-typo3-solr rm -Rf /var/solr/data/"$name"
        echo "🗑️Deleted core '$name' "
    else
        error_message=$(echo "$response" | yqd '.error.msg')
        echo "ℹ️ Core '$name' - $error_message"
    fi
}

# Start the project if not already running, so we can interact with solr
ddev_status=$(ddev describe -j | yqd -p=json eval '.raw.status')
if [ "$ddev_status" = "stopped" ]; then
    ddev start
fi

case $CMD in
apply)
    if [ -n "$2" ]; then
        YAML_FILE="$2"
    fi

    if [ ! -f "$YAML_FILE" ]; then
        echo "Add-on config file $YAML_FILE does not exist."
        exit 1
    fi

    echo "Apply config $YAML_FILE"

    YAML=$(cat "$YAML_FILE")
    config="$DDEV_APPROOT/$(echo "$YAML" | yqd eval '.config')"

    if [ ! -f "$config" ]; then
        echo "Solr config file $config does not exist."
        exit 1
    fi

    # Copy files to the typo3-solr volume
    docker exec -i ddev-"$DDEV_SITENAME"-typo3-solr mkdir -p /var/solr/data/configsets/
    echo "🐳 Copy $(basename "$config") to container"
    docker cp "$config" ddev-"$DDEV_SITENAME"-typo3-solr:/var/solr/data/ 1>/dev/null
    docker exec -i -u root ddev-"$DDEV_SITENAME"-typo3-solr chown -R solr:solr /var/solr/data/
    docker restart ddev-"$DDEV_SITENAME"-typo3-solr 1>/dev/null
    wait_for_solr

    IFS=$'\n' configsets=($(echo "$YAML" | yqd -o=j -I=0 '.configsets.[]'))
    for configset in "${configsets[@]}"; do
        configset_name=$(echo "$configset" | yqd '.name // ""' -)
        configset_path="$DDEV_APPROOT/$(echo "$configset" | yqd '.path // ""' -)"

        if [ ! -d "$configset_path" ]; then
            echo -e "Solr configset '$configset_name' does not exist."
            exit 1
        fi

        echo "🐳 Copy configset '$configset_name' to container"
        docker cp "$configset_path/." "ddev-$DDEV_SITENAME-typo3-solr:/var/solr/data/configsets/$configset_name" 1>/dev/null
        docker exec -i -u root ddev-"$DDEV_SITENAME"-typo3-solr chown -R solr:solr "/var/solr/data/configsets/$configset_name"

        # Create solr cores if needed
        IFS=$'\n' cores_array=($(echo "$configset" | yqd -o=j -I=0 '.cores.[]'))
        for core in "${cores_array[@]}"; do
            name=$(echo "$core" | yqd '.name // ""' -)
            schema=$(echo "$core" | yqd '.schema // ""' -)

            create_core "$name" "$configset_name" "$schema"
        done
    done
    ;;

wipe)
    api_url="http://localhost:8983/solr/admin/cores?action=STATUS&wt=json"
    response=$(ddev exec -s typo3-solr bin/solr api -get "$api_url")
    response_code=$?

    if [ "$response_code" -gt 0 ]; then
        echo "❌ Failed to call solr API on $api_url"
    else
        IFS=$'\n' cores_array=($(echo "$response" | yqd -o=j -I=0 '.status.[] // 0'))
        if [ "$(echo -n "${cores_array[@]}")" != "0" ]; then
            for core in "${cores_array[@]}"; do
                name=$(echo "$core" | yqd '.name // ""' -)

                delete_core "$name"
            done
        fi
    fi

    # Delete all files in the
    echo "🗑️Delete all configsets and solr.xml configuration"
    docker exec -u 0 -i ddev-"$DDEV_SITENAME"-typo3-solr rm -Rf /var/solr/data/configsets /var/solr/data/solr.xml
    docker restart ddev-"$DDEV_SITENAME"-typo3-solr 1>/dev/null

    wait_for_solr
    ;;

--help | *)
    echo "——————————————"
    echo -e "\033[1mExample Usage:\033[0m"
    echo "——————————————"
    echo -e "\033[1mApply\033[0m"
    echo "—————"
    echo "Create solr cores and configsets defined in .ddev/typo3-solr/config.yaml"
    echo "👉 ddev solrctl apply [config path] - relative to docroot, optional"
    echo ""
    echo -e "\033[1mWipe\033[0m"
    echo "—————"
    echo "Remove solr cores and configset"
    echo "👉 ddev solrctl wipe"
    ;;
esac
